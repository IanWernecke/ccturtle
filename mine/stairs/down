#!/bin/lua

-- mine/stairs/down program


local usage = function()
  print("Usage: DEPTH [WIDTH]")
  print("  DEPTH: the depth of the staircase to mine.")
  print("  WIDTH: the width of the staircase to mine.")
  print("    (default: 1)")
  print("  HEIGHT: the height of the staircase to mine.")
  print("    (default: 5)")
  error()
end


-- collect the arguments from the command line
local args = {...}


-- check the number of arguments
if #args == 0 or #args > 3 then
  usage()
end


-- set the global values for the staircase
SC_DEPTH = (#args > 0 and tonumber(args[1]) or 1)
SC_WIDTH = (#args > 1 and tonumber(args[2]) or 1)
SC_HEIGHT = (#args > 2 and tonumber(args[3]) or 5)


-- dig a section of rock
function dig_stair_level()

  -- init locals and begin work
  local count = 0
  local res = dig.back(dig.forward(SC_HEIGHT - 1))
  count = count + res

  -- ensure success of the dig
  if res ~= SC_HEIGHT - 1 then return count end

  turtle.turnLeft()

  -- if there is a width to be dug
  if SC_WIDTH > 1 then
    for width = 2, SC_WIDTH do

      -- ensure we can dig forward 1
      res = dig.forward()
      if res ~= 1 then return count end
      count = count + 1

      -- ensure we can dig left 6
      res = dig.back(dig.left(SC_HEIGHT - 1))
      count = count + res
      if res ~= SC_HEIGHT - 1 then
        return count
      end

      turtle.turnLeft()

    end

    -- return to the starting row
    -- (position before width > 1 movement)
    dig.back(SC_WIDTH - 1)
    turtle.turnLeft()
    turtle.turnLeft()

  end
  turtle.turnLeft()
  return count

end


-- keep track of the total amount dug
local count = 0
local level_expect = (SC_HEIGHT * SC_WIDTH) - 1
for depth = 1, SC_DEPTH do

  -- if this loop is being entered after the first iter, move forward
  if depth > 1 then dig.forward() end

  dig.down()
  local res = dig_stair_level()
  count = count + res
  if res ~= level_expect then
    error(string.format("Failed to completely dig level! [%d/%d]", res, level_expect))
  end

end
print(string.format('Dug %d blocks!', count))
