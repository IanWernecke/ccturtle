#!/bin/lua

-- mine/stairs/down program


local usage = function()
  print("Usage: DEPTH [WIDTH]")
  print("  DEPTH: the depth of the staircase to mine.")
  print("  WIDTH: the width of the staircase to mine.")
  print("    (default: 1)")
  error()
end


STAIR_HEIGHT = 6


-- collect the arguments from the command line
local args = {...}


-- check the number of arguments
if #args == 0 or #args > 2 then
  usage()
end


-- determine the max depth and the width of the stairs
local max_depth = tonumber(args[1])
if #args > 1 then
  max_width = tonumber(args[2])
else
  max_width = 1
end


-- dig a section of rock
function dig_stair_level(width)

  -- fix up incoming width if not given
  if width == nil then width = 1 end

  -- init locals and begin work
  local count = 0
  local res = dig.forward(STAIR_HEIGHT)
  count = count + res

  -- ensure success of the dig
  if res ~= STAIR_HEIGHT then
    dig.back(res)
    return count
  end

  dig.back(STAIR_HEIGHT)
  turtle.turnLeft()

  -- if there is a width to be dug
  if width > 1 then
    for level_width = 2, width do

      -- ensure we can dig forward 1
      res = dig.forward()
      if res ~= 1 then
        return count
      end
      count = count + 1

      -- ensure we can dig left 6
      res = dig.left(STAIR_HEIGHT)
      count = count + res
      if res ~= STAIR_HEIGHT then
        dig.back(res)
        return count
      end

      dig.back(STAIR_HEIGHT)
      turtle.turnLeft()

    end

    -- return to the starting row
    -- (position before width > 1 movement)
    dig.back(width - 1)
    turtle.turnLeft()
    turtle.turnLeft()

  end
  turtle.turnLeft()
  return count

end


-- keep track of the total amount dug
local count = 0
for depth = 1, max_depth do

  -- if this loop is being entered after the first iter, move forward
  if depth > 1 then dig.forward() end

  dig.down()
  local res = dig_stair_level(max_width)
  count = count + res
  if res ~= STAIR_HEIGHT * max_width then
    error(string.format("Failed to completely dig level! [%d/%d]", res, STAIR_HEIGHT * max_width))
  end

end
print(string.format('Dug %d blocks!', count))
