#!/usr/bin/lua


-- description:
--  this api is written to provide basic building utilities
-- requires:
--  dig, move, place


-- this function determines if a row has nothing to build
local has_content = function(row)
  return #row > 0 and row:match("%.+") ~= row
end


-- set the row of blocks in front of the turtle (and below) to
-- contain or be empty of blocks
function build_row(row)

  local count = 0
  for char_index = 1, #row do

      local char = row:sub(char_index, char_index)
      if char == '#' then
        if not turtle.detectDown() then
          place.down()
          count = count + 1
        end
      elseif char == '.' then
        clear.down()
      end

      -- dig forward
      if char_index ~= #row then dig.forward() end

  end
  move.back(#row - 1)
  return count

end


-- given an array of strings, build each row in the layer
function build_layer(layer)

  -- if the layer has no rows, return 0
  if #layer == 0 then return 0 end

  local layer_count = 0

  -- if the first row has content, build it
  if has_content(layer[1]) then
    build_row(layer[1])
  end

  -- if there is only one row, return now
  if #layer == 1 then return layer_count end

  -- turn to the right
  turtle.turnRight()

  -- for each row in the layer after the first, orient and build
  for row_index = 2, #layer do

    dig.forward()

    -- if the row has something worth building, build it and reorient
    if has_content(layer[row_index]) then
      turtle.turnLeft()
      layer_count = layer_count + build_row(layer[row_index])
      turtle.turnRight()
    end

  end

  -- move back to the starting position
  move.back(#layer - 1)
  turtle.turnLeft()
  return layer_count

end


-- given an array of an array of strings, print an entire building like a 3d printer
function build(building)

  -- ensure the turtle has something to build with
  if inventory.count() == 0 then
    error("No items in inventory!")
  end

  -- for each layer in the building
  for layer = 1, #building do
    dig.up()
    build_layer(building[layer])
  end

  -- all finished building, return to one space behind starting position
  turtle.turnLeft()
  turtle.turnLeft()
  if detect.forward() == false then
    move.forward()
  end
  turtle.turnLeft()
  turtle.turnLeft()
  move.down(#building)

end
